oja_twfe <- format_twfe_oja_data(oja, ai_exposure)
# run ---------------------------------------------------------------------
oja_twfe <- oja_twfe %>%
mutate(
time_factor = factor(format(dmax, "%Y-%m")),  # Create factor for each month-year combination
ai_exposure_post_chatgpt = ai_product_exposure_score * post_chatgpt,
felten_exposure_post_chatgpt = felten_exposure_score * post_chatgpt,
webb_exposure_post_chatgpt = webb_exposure_score * post_chatgpt,
beta_eloundou_post_chatgpt = beta_eloundou * post_chatgpt
)
# Function to set up and run the model for different exposure scores
run_exposure_model <- function(exposure_var, data) {
cat("Training brms model for", exposure_var, "\n")
formula <- bf(
log_OJA ~ 0 + {{exposure_var}} + time_factor +
(1 | idcountry) + (1 | idesco_level_2)
)
priors <- c(
prior(normal(0, 0.5), class = "b", coef = as.character(substitute(exposure_var))),
prior(exponential(1), class = "sd", group = "idcountry"),
prior(exponential(1), class = "sd", group = "idesco_level_2"),
prior(exponential(1), class = "sigma")
)
model <- brm(
formula = formula,
data = data,
family = gaussian(),
prior = priors,
cores = 4,
chains = 4,
iter = 4000,
warmup = 2000,
control = list(adapt_delta = 0.95)
)
return(model)
}
# Run models for different exposure scores
exposure_vars <- c(
"ai_exposure_post_chatgpt",
"felten_exposure_post_chatgpt",
"webb_exposure_post_chatgpt",
"beta_eloundou_post_chatgpt"
)
models <- map(exposure_vars, ~run_exposure_model(!!sym(.x), oja_twfe))
exposure_vars
# Function to set up and run the model for different exposure scores
run_exposure_model <- function(exposure_var, data) {
cat("Training brms model for", as.character(substitute(exposure_var)), "\n")
formula <- bf(
log_OJA ~ 0 + {{exposure_var}} + time_factor +
(1 | idcountry) + (1 | idesco_level_2)
)
priors <- c(
prior(normal(0, 0.5), class = "b", coef = as.character(substitute(exposure_var))),
prior(exponential(1), class = "sd", group = "idcountry"),
prior(exponential(1), class = "sd", group = "idesco_level_2"),
prior(exponential(1), class = "sigma")
)
model <- brm(
formula = formula,
data = data,
family = gaussian(),
prior = priors,
cores = 4,
chains = 4,
iter = 4000,
warmup = 2000,
control = list(adapt_delta = 0.95)
)
return(model)
}
# Run models for different exposure scores
exposure_vars <- c(
"ai_exposure_post_chatgpt",
"felten_exposure_post_chatgpt",
"webb_exposure_post_chatgpt",
"beta_eloundou_post_chatgpt"
)
models <- map(exposure_vars, ~run_exposure_model(!!sym(.x), oja_twfe))
# Function to set up and run the model for different exposure scores
run_exposure_model <- function(exposure_var, data) {
formula <- bf(
log_OJA ~ 0 + {{exposure_var}} + time_factor +
(1 | idcountry) + (1 | idesco_level_2)
)
priors <- c(
prior(normal(0, 0.5), class = "b", coef = as.character(substitute(exposure_var))),
prior(exponential(1), class = "sd", group = "idcountry"),
prior(exponential(1), class = "sd", group = "idesco_level_2"),
prior(exponential(1), class = "sigma")
)
model <- brm(
formula = formula,
data = data,
family = gaussian(),
prior = priors,
cores = 4,
chains = 4,
iter = 4000,
warmup = 2000,
control = list(adapt_delta = 0.95)
)
return(model)
}
# Run models for different exposure scores
exposure_vars <- c(
"ai_exposure_post_chatgpt",
"felten_exposure_post_chatgpt",
"webb_exposure_post_chatgpt",
"beta_eloundou_post_chatgpt"
)
models <- map(exposure_vars, ~run_exposure_model(!!sym(.x), oja_twfe))
oja_twfe
# Load necessary libraries
library(brms)
library(tidybayes)
library(tidyverse)
source("R/helpers.R")
# read data ---------------------------------------------------------------
oja <- list.files("data/cedefop_skills_ovate/csv", full.names = TRUE) %>%
map_dfr(read_csv)
ai_exposure <- read_ai_exposure_file(
"data/ai_exposure_scores/scored_esco_occupations_matched.csv"
)
# prep for model ----------------------------------------------------------
oja_twfe <- format_twfe_oja_data(oja, ai_exposure)
# run ---------------------------------------------------------------------
oja_twfe <- oja_twfe %>%
mutate(
time_factor = factor(format(dmax, "%Y-%m")),  # Create factor for each month-year combination
ai_exposure_post_chatgpt = ai_product_exposure_score * post_chatgpt,
felten_exposure_post_chatgpt = felten_exposure_score * post_chatgpt,
webb_exposure_post_chatgpt = webb_exposure_score * post_chatgpt,
beta_eloundou_post_chatgpt = beta_eloundou * post_chatgpt
)
# Function to set up and run the model for different exposure scores
run_exposure_model <- function(exposure_var, data) {
formula <- bf(
log_OJA ~ 0 + !!sym(exposure_var) + time_factor +
(1 | idcountry) + (1 | idesco_level_2)
)
priors <- c(
prior(normal(0, 0.5), class = "b", coef = exposure_var),
prior(exponential(1), class = "sd", group = "idcountry"),
prior(exponential(1), class = "sd", group = "idesco_level_2"),
prior(exponential(1), class = "sigma")
)
model <- brm(
formula = formula,
data = data,
family = gaussian(),
prior = priors,
cores = 4,
chains = 4,
iter = 4000,
warmup = 2000,
control = list(adapt_delta = 0.95)
)
return(model)
}
# Run models for different exposure scores
exposure_vars <- c(
"ai_exposure_post_chatgpt",
"felten_exposure_post_chatgpt",
"webb_exposure_post_chatgpt",
"beta_eloundou_post_chatgpt"
)
models <- map(exposure_vars, ~run_exposure_model(.x, oja_twfe))
# Function to set up and run the model for different exposure scores
run_exposure_model <- function(exposure_var, data) {
formula <- bf(
log_OJA ~ 0 + time_factor +
(1 | idcountry) + (1 | idesco_level_2)
)
# Add the exposure variable to the formula
formula$formula <- update(formula$formula, paste("~", exposure_var, "+ ."))
priors <- c(
prior(normal(0, 0.5), class = "b", coef = exposure_var),
prior(exponential(1), class = "sd", group = "idcountry"),
prior(exponential(1), class = "sd", group = "idesco_level_2"),
prior(exponential(1), class = "sigma")
)
model <- brm(
formula = formula,
data = data,
family = gaussian(),
prior = priors,
cores = 4,
chains = 4,
iter = 4000,
warmup = 2000,
control = list(adapt_delta = 0.95)
)
return(model)
}
# Function to set up and run the model for different exposure scores
run_exposure_model <- function(exposure_var, data) {
formula <- bf(
log_OJA ~ 0 + time_factor +
(1 | idcountry) + (1 | idesco_level_2)
)
# Add the exposure variable to the formula
formula$formula <- update(formula$formula, paste("~", exposure_var, "+ ."))
priors <- c(
prior(normal(0, 0.5), class = "b", coef = exposure_var),
prior(exponential(1), class = "sd", group = "idcountry"),
prior(exponential(1), class = "sd", group = "idesco_level_2"),
prior(exponential(1), class = "sigma")
)
model <- brm(
formula = formula,
data = data,
family = gaussian(),
prior = priors,
cores = 4,
chains = 4,
iter = 4000,
warmup = 2000,
control = list(adapt_delta = 0.95)
)
return(model)
}
# Run models for different exposure scores
exposure_vars <- c(
"ai_exposure_post_chatgpt",
"felten_exposure_post_chatgpt",
"webb_exposure_post_chatgpt",
"beta_eloundou_post_chatgpt"
)
models <- map(exposure_vars, ~run_exposure_model(.x, oja_twfe))
debugonce(oja_twfe)
debugonce(run_exposure_model)
models <- map(exposure_vars, ~run_exposure_model(.x, oja_twfe))
exposure_var
formula
priors <- c(
prior(normal(0, 0.5), class = "b", coef = exposure_var),
prior(exponential(1), class = "sd", group = "idcountry"),
prior(exponential(1), class = "sd", group = "idesco_level_2"),
prior(exponential(1), class = "sigma")
)
priors
?prior
priors <- c(
prior(normal(0, 0.5), class = "b", coef = "ai_exposure_post_chatgpt"),
prior(exponential(1), class = "sd", group = "idcountry"),
prior(exponential(1), class = "sd", group = "idesco_level_2"),
prior(exponential(1), class = "sigma")
)
model <- brm(
formula = formula,
data = data,
family = gaussian(),
prior = priors,
cores = 4,
chains = 4,
iter = 4000,
warmup = 2000,
control = list(adapt_delta = 0.95)
)
data
data$ai_exposure_post_chatgpt %>% is.na() %>% sum
# Function to set up and run the model for different exposure scores
run_exposure_model <- function(exposure_var, data) {
formula <- bf(
log_OJA ~ 0 + time_factor +
(1 | idcountry) + (1 | idesco_level_2)
)
# Add the exposure variable to the formula
formula$formula <- update(formula$formula, paste("~", exposure_var, "+ ."))
priors <- c(
prior(
normal(0, 0.5), class = "b",
coef = switch(
exposure_var,
"ai_exposure_post_chatgpt" = "ai_product_exposure_score",
"felten_exposure_post_chatgpt" = "felten_exposure_score",
"webb_exposure_post_chatgpt" = "webb_exposure_score",
"beta_eloundou_post_chatgpt" = "beta_eloundou"
)
),
prior(exponential(1), class = "sd", group = "idcountry"),
prior(exponential(1), class = "sd", group = "idesco_level_2"),
prior(exponential(1), class = "sigma")
)
model <- brm(
formula = formula,
data = data,
family = gaussian(),
prior = priors,
cores = 4,
chains = 4,
iter = 4000,
warmup = 2000,
control = list(adapt_delta = 0.95)
)
return(model)
}
# Run models for different exposure scores
exposure_vars <- c(
"ai_exposure_post_chatgpt",
"felten_exposure_post_chatgpt",
"webb_exposure_post_chatgpt",
"beta_eloundou_post_chatgpt"
)
models <- map(exposure_vars, ~run_exposure_model(.x, oja_twfe))
TT =c(1)
TT = c(TT,2)
TT
# Function to set up and run the model for different exposure scores
run_exposure_model <- function(exposure_var, data) {
formula <- bf(
log_OJA ~ 0 + time_factor +
(1 | idcountry) + (1 | idesco_level_2)
)
# Add the exposure variable to the formula
formula$formula <- update(formula$formula, paste("~", exposure_var, "+ ."))
if (exposure_var == "ai_exposure_post_chatgpt") {
priors <- c(
prior(
normal(0, 0.5), class = "b",
coef = "ai_product_exposure_post_chatgpt")
)
} else if (exposure_var == "felten_exposure_post_chatgpt") {
priors <- c(
prior(
normal(0, 0.5), class = "b",
coef = "felten_exposure_post_chatgpt")
)
} else if (exposure_var == "webb_exposure_post_chatgpt") {
priors <- c(
prior(
normal(0, 0.5), class = "b",
coef = "webb_exposure_post_chatgpt")
)
} else if (exposure_var == "beta_eloundou_post_chatgpt") {
priors <- c(
prior(
normal(0, 0.5), class = "b",
coef = "beta_eloundou_post_chatgpt")
)
} # if I just pass the string it tries to interpret it as a variable name
priors <- c(
priors,
prior(exponential(1), class = "sd", group = "idcountry"),
prior(exponential(1), class = "sd", group = "idesco_level_2"),
prior(exponential(1), class = "sigma")
)
model <- brm(
formula = formula,
data = data,
family = gaussian(),
prior = priors,
cores = 4,
chains = 4,
iter = 4000,
warmup = 2000,
control = list(adapt_delta = 0.95)
)
return(model)
}
# Run models for different exposure scores
exposure_vars <- c(
"ai_exposure_post_chatgpt",
"felten_exposure_post_chatgpt",
"webb_exposure_post_chatgpt",
"beta_eloundou_post_chatgpt"
)
models <- map(exposure_vars, ~run_exposure_model(.x, oja_twfe))
# Function to set up and run the model for different exposure scores
run_exposure_model <- function(exposure_var, data) {
data$exposure_var <- data[[exposure_var]]
formula <- bf(
log_OJA ~ 0 + exposure_var + time_factor +
(1 | idcountry) + (1 | idesco_level_2)
)
priors <- c(
prior(normal(0, 0.5), class = "b", coef = "exposure_var"),
prior(exponential(1), class = "sd", group = "idcountry"),
prior(exponential(1), class = "sd", group = "idesco_level_2"),
prior(exponential(1), class = "sigma")
)
model <- brm(
formula = formula,
data = data,
family = gaussian(),
prior = priors,
cores = 4,
chains = 4,
iter = 4000,
warmup = 2000,
control = list(adapt_delta = 0.95)
)
return(model)
}
# Run models for different exposure scores
exposure_vars <- c(
"ai_exposure_post_chatgpt",
"felten_exposure_post_chatgpt",
"webb_exposure_post_chatgpt",
"beta_eloundou_post_chatgpt"
)
models <- map(exposure_vars, ~run_exposure_model(.x, oja_twfe))
names(models) <- exposure_vars
warnings()
saveRDS(models, file = "chkp/oja_exposure_models.RDS")
# Summarize and plot results for each model
map(names(models), function(name) {
cat("\nSummary for", name, "model:\n")
print(summary(models[[name]]))
cat("\nPlotting posterior distribution for", name, ":\n")
print(mcmc_plot(models[[name]], type = "areas", regex_pars = paste0("b_exposure_var")))
cat("\nPlotting time effects for", name, "model:\n")
time_effects <- conditional_effects(models[[name]], effects = "time_factor")
print(plot(time_effects))
})
library(tidyverse)
library(brms)
library(tidybayes)
source("R/helpers.R")
# read and prep data ------------------------------------------------------
nama_10_cp <- read_csv("results/intermediate_datasets/nama_10_cp_gvancs.csv")
nama_10_lp <- read_csv("results/intermediate_datasets/nama_10_lp_rlrphw.csv")
cedefop_sectoral <- read_csv("data/cedefop_skills_intelligence/cedefop_sectoral_employment_data.csv")
ai_exposure <- read_ai_exposure_file(
"data/ai_exposure_scores/scored_esco_occupations_matched.csv"
)
sectoral_exposure <- derive_sectoral_exposure(ai_exposure, cedefop_sectoral)
nama_10_lp_prep <- prep_nama_data(nama_10_lp, sectoral_exposure)
nama_10_cp_prep <- prep_nama_data(nama_10_cp, sectoral_exposure)
# Bayesian model function -------------------------------------------------
run_bayesian_model <- function(data, exposure_var) {
data$exposure_var <- data[[exposure_var]]
formula <- bf(
log_value ~ 0 + exposure_var * post_chatgpt + (1 | nace_rev2_code) + (1 | country_code) + (1 | year)
)
priors <- c(
prior(normal(0, 1), class = "b"),
prior(exponential(1), class = "sd", group = "nace_rev2_code"),
prior(exponential(1), class = "sd", group = "country_code"),
prior(exponential(1), class = "sd", group = "year"),
prior(exponential(1), class = "sigma")
)
model <- brm(
formula = formula,
data = data,
family = gaussian(),
prior = priors,
cores = 4,
chains = 4,
iter = 4000,
warmup = 2000,
control = list(adapt_delta = 0.95)
)
return(model)
}
# Run Bayesian models -----------------------------------------------------
exposure_vars <- c(
"ai_product_exposure_score",
"felten_exposure_score",
"webb_exposure_score",
"beta_eloundou"
)
lp_bayesian_models <- map(exposure_vars, ~run_bayesian_model(nama_10_lp_prep, .x))
library(tidyverse)
library(brms)
library(tidybayes)
source("R/helpers.R")
# read and prep data ------------------------------------------------------
nama_10_cp <- read_csv("results/intermediate_datasets/nama_10_cp_gvancs.csv")
nama_10_lp <- read_csv("results/intermediate_datasets/nama_10_lp_rlrphw.csv")
cedefop_sectoral <- read_csv("data/cedefop_skills_intelligence/cedefop_sectoral_employment_data.csv")
ai_exposure <- read_ai_exposure_file(
"data/ai_exposure_scores/scored_esco_occupations_matched.csv"
)
sectoral_exposure <- derive_sectoral_exposure(ai_exposure, cedefop_sectoral)
nama_10_lp_prep <- prep_nama_data(nama_10_lp, sectoral_exposure)
nama_10_cp_prep <- prep_nama_data(nama_10_cp, sectoral_exposure)
# Bayesian model function -------------------------------------------------
run_bayesian_model <- function(data, exposure_var) {
data$exposure_var <- data[[exposure_var]]
formula <- bf(
log_value ~ 0 + exposure_var * post_chatgpt + (1 | nace_rev2_code) + (1 | country_code) + (1 | year)
)
priors <- c(
prior(normal(0, 1), class = "b"),
prior(exponential(1), class = "sd", group = "nace_rev2_code"),
prior(exponential(1), class = "sd", group = "country_code"),
prior(exponential(1), class = "sd", group = "year"),
prior(exponential(1), class = "sigma")
)
model <- brm(
formula = formula,
data = data,
family = gaussian(),
prior = priors,
cores = 4,
chains = 4,
iter = 4000,
warmup = 2000,
control = list(adapt_delta = 0.95)
)
return(model)
}
# Run Bayesian models -----------------------------------------------------
exposure_vars <- c(
"ai_product_exposure_score",
"felten_exposure_score",
"webb_exposure_score",
"beta_eloundou"
)
lp_bayesian_models <- map(exposure_vars, ~run_bayesian_model(nama_10_lp_prep, .x))
